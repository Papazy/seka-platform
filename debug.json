{
    "data": {
        "id": "01K7PRKDPR8G44T9R4CFZ6M07G",
        "judul": "Tugas 2: Sorting Algorithm",
        "deskripsi": "# Praktikum Algoritma Sorting\n\n## Deskripsi\nImplementasi **algoritma pengurutan** (sorting) yaitu **Bubble Sort**, **Insertion Sort**, dan **Selection Sort** untuk mengurutkan data.\n\n## Tujuan Pembelajaran\n- Memahami konsep **algoritma sorting**\n- Mengimplementasikan berbagai **algoritma sorting** sederhana\n- Menganalisis **kompleksitas waktu** dan **ruang**\n- Membandingkan **performa** algoritma sorting\n\n## Bubble Sort\n### Konsep\n- Membandingkan **elemen bersebelahan**\n- **Menukar posisi** jika tidak sesuai urutan\n- Elemen terbesar akan \"**menggelembung**\" ke akhir\n\n### Algoritma\n```python\ndef bubble_sort(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr\n```\n\n### Kompleksitas\n- **Time**: O(nÂ²)\n- **Space**: O(1)\n\n## Selection Sort\n### Konsep\n- Mencari elemen **terkecil** dalam array\n- **Menukar** dengan elemen pertama\n- Mengulangi untuk subarray sisanya\n\n### Algoritma\n```python\ndef selection_sort(arr):\n    n = len(arr)\n    for i in range(n):\n        min_idx = i\n        for j in range(i+1, n):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n    return arr\n```\n\n### Kompleksitas\n- **Time**: O(nÂ²)\n- **Space**: O(1)\n\n## Insertion Sort\n### Konsep\n- Membangun **sorted portion** secara bertahap\n- **Menyisipkan** elemen ke posisi yang tepat\n- Efisien untuk **dataset kecil**\n\n### Algoritma\n```python\ndef insertion_sort(arr):\n    for i in range(1, len(arr)):\n        key = arr[i]\n        j = i - 1\n        while j >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            j -= 1\n        arr[j + 1] = key\n    return arr\n```\n\n### Kompleksitas\n- **Time**: O(nÂ²) worst case, O(n) best case\n- **Space**: O(1)\n\n## Perbandingan Algoritma\n\n| Algorithm | Best Case | Average Case | Worst Case | Space | Stable |\n|-----------|-----------|--------------|------------|-------|--------|\n| Bubble Sort | O(n) | O(nÂ²) | O(nÂ²) | O(1) | Yes |\n| Selection Sort | O(nÂ²) | O(nÂ²) | O(nÂ²) | O(1) | No |\n| Insertion Sort | O(n) | O(nÂ²) | O(nÂ²) | O(1) | Yes |\n\n## Kapan Menggunakan?\n### Bubble Sort\n- **Educational purposes**\n- Dataset sangat kecil\n- Stabilitas diperlukan\n\n### Selection Sort  \n- **Memory terbatas**\n- Minimalisir **swap operations**\n- Tidak peduli stabilitas\n\n### Insertion Sort\n- Dataset **hampir terurut**\n- **Online algorithm** (data datang bertahap)\n- Sebagai **hybrid** dengan algoritma lain\n\n> **ðŸŽ¯ Optimization**: Untuk production, gunakan algoritma yang lebih efisien seperti **Quick Sort** atau **Merge Sort**!",
        "deadline": "2025-10-18T16:59:00.000Z",
        "maksimalSubmit": 5,
        "tugasBahasa": [
            {
                "idTugas": "01K7PRKDPR8G44T9R4CFZ6M07G",
                "idBahasa": "01K7PRKC5K5Q3DC3ZN13JM53K8",
                "bahasa": {
                    "id": "01K7PRKC5K5Q3DC3ZN13JM53K8",
                    "nama": "Python",
                    "ekstensi": ".py",
                    "compiler": "python3",
                    "versi": "3.11",
                    "createdAt": "2025-10-16T15:00:47.923Z",
                    "updatedAt": "2025-10-16T15:00:47.923Z"
                }
            },
            {
                "idTugas": "01K7PRKDPR8G44T9R4CFZ6M07G",
                "idBahasa": "01K7PRKC5M179AV363607DD765",
                "bahasa": {
                    "id": "01K7PRKC5M179AV363607DD765",
                    "nama": "C++",
                    "ekstensi": ".cpp",
                    "compiler": "g++",
                    "versi": "6.3.0",
                    "createdAt": "2025-10-16T15:00:47.924Z",
                    "updatedAt": "2025-10-16T15:00:47.924Z"
                }
            },
            {
                "idTugas": "01K7PRKDPR8G44T9R4CFZ6M07G",
                "idBahasa": "01K7PRKC5MNFGBE29GEY2WDF8F",
                "bahasa": {
                    "id": "01K7PRKC5MNFGBE29GEY2WDF8F",
                    "nama": "Java",
                    "ekstensi": ".java",
                    "compiler": "javac",
                    "versi": "17",
                    "createdAt": "2025-10-16T15:00:47.924Z",
                    "updatedAt": "2025-10-16T15:00:47.924Z"
                }
            },
            {
                "idTugas": "01K7PRKDPR8G44T9R4CFZ6M07G",
                "idBahasa": "01K7PRKC5MVN06Q33730Y8T72Q",
                "bahasa": {
                    "id": "01K7PRKC5MVN06Q33730Y8T72Q",
                    "nama": "C",
                    "ekstensi": ".c",
                    "compiler": "gcc",
                    "versi": "6.3.0",
                    "createdAt": "2025-10-16T15:00:47.925Z",
                    "updatedAt": "2025-10-16T15:00:47.925Z"
                }
            }
        ],
        "createdAt": "2025-10-16T15:00:49.497Z",
        "isOverdue": true,
        "userRole": "peserta",
        "praktikum": {
            "nama": "Praktikum Struktur Data dan Algoritma A",
            "kodePraktikum": "SDA-A-2025-1",
            "kelas": "A",
            "id": "01K7PRKDNMXM4A7HJ0QN0YKZN7"
        },
        "pembuat": {
            "nama": "Budi Setiawan",
            "npm": "2108107010003"
        },
        "soal": [
            {
                "id": "01K7PRKDQMJNRBEAGQPYB7FB7V",
                "judul": "Bubble Sort",
                "deskripsi": "Implementasikan algoritma bubble sort untuk mengurutkan array.",
                "batasan": "Jumlah elemen <= 100, nilai elemen <= 1000",
                "formatInput": "Baris pertama berisi jumlah elemen N. Baris kedua berisi N elemen dipisahkan spasi.",
                "formatOutput": "Array setelah diurutkan, dipisahkan spasi",
                "batasanMemoriKb": 65536,
                "batasanWaktuEksekusiMs": 3000,
                "templateKode": "def bubble_sort(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr\n\nn = int(input())\narr = list(map(int, input().split()))\nsorted_arr = bubble_sort(arr)\nprint(\" \".join(map(str, sorted_arr)))",
                "bobotNilai": 100,
                "contohTestCase": [],
                "totalTestCase": 3,
                "userSubmissions": [
                    {
                        "id": "01K7RJXF12QA03MBZGRBF7F4J4",
                        "score": 100,
                        "submittedAt": "2025-10-17T07:59:58.763Z",
                        "bahasa": {
                            "nama": "C++",
                            "ekstensi": ".cpp"
                        },
                        "testCaseResults": []
                    },
                    {
                        "id": "01K7PSHJ7B30GRAJYSXRDZKD11",
                        "score": 33,
                        "submittedAt": "2025-10-16T15:17:22.114Z",
                        "bahasa": {
                            "nama": "C++",
                            "ekstensi": ".cpp"
                        },
                        "testCaseResults": []
                    },
                    {
                        "id": "01K7PSGFC5JAYYWQ1M8ZA0ZS3P",
                        "score": 0,
                        "submittedAt": "2025-10-16T15:16:44.675Z",
                        "bahasa": {
                            "nama": "C++",
                            "ekstensi": ".cpp"
                        },
                        "testCaseResults": []
                    },
                    {
                        "id": "01K7PSASCKM1E558QQ7NRN8BH6",
                        "score": 0,
                        "submittedAt": "2025-10-16T15:13:59.319Z",
                        "bahasa": {
                            "nama": "C++",
                            "ekstensi": ".cpp"
                        },
                        "testCaseResults": []
                    },
                    {
                        "id": "01K7PS98YVBENQ1E9YAR1GWS3K",
                        "score": 0,
                        "submittedAt": "2025-10-16T15:12:48.125Z",
                        "bahasa": {
                            "nama": "C++",
                            "ekstensi": ".cpp"
                        },
                        "testCaseResults": []
                    },
                    {
                        "id": "01K7PRXSTNT036FQ0BBD3SRSK9",
                        "score": 100,
                        "submittedAt": "2025-10-16T15:06:32.912Z",
                        "bahasa": {
                            "nama": "C++",
                            "ekstensi": ".cpp"
                        },
                        "testCaseResults": []
                    }
                ],
                "bestScore": 100,
                "submissionCount": 6,
                "canSubmit": false
            },
            {
                "id": "01K7PRKDQNC6TWMSH3FGWXPV69",
                "judul": "Selection Sort",
                "deskripsi": "Implementasikan algoritma selection sort untuk mengurutkan array.",
                "batasan": "Jumlah elemen <= 100, nilai elemen <= 1000",
                "formatInput": "Baris pertama berisi jumlah elemen N. Baris kedua berisi N elemen dipisahkan spasi.",
                "formatOutput": "Array setelah diurutkan, dipisahkan spasi",
                "batasanMemoriKb": 10000,
                "batasanWaktuEksekusiMs": 3000,
                "templateKode": "def selection_sort(arr):\n    n = len(arr)\n    for i in range(n):\n        min_idx = i\n        for j in range(i+1, n):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n    return arr\n\nn = int(input())\narr = list(map(int, input().split()))\nsorted_arr = selection_sort(arr)\nprint(\" \".join(map(str, sorted_arr)))",
                "bobotNilai": 100,
                "contohTestCase": [
                    {
                        "id": "01K7PV11VNG42435JD57K8D9F4",
                        "contohInput": "3\n3 2 1",
                        "contohOutput": "1 2 3",
                        "penjelasanInput": "",
                        "penjelasanOutput": ""
                    }
                ],
                "totalTestCase": 2,
                "userSubmissions": [
                    {
                        "id": "01K7PY67YS2ZJJ1R2H2CKZVVG8",
                        "score": 100,
                        "submittedAt": "2025-10-16T16:38:31.910Z",
                        "bahasa": {
                            "nama": "C++",
                            "ekstensi": ".cpp"
                        },
                        "testCaseResults": []
                    },
                    {
                        "id": "01K7PV1G7D21X6Y4N15SN13SXV",
                        "score": 100,
                        "submittedAt": "2025-10-16T15:43:30.595Z",
                        "bahasa": {
                            "nama": "C++",
                            "ekstensi": ".cpp"
                        },
                        "testCaseResults": []
                    },
                    {
                        "id": "01K7PTRSZBWDJXR88HRJQT884Q",
                        "score": 0,
                        "submittedAt": "2025-10-16T15:38:50.741Z",
                        "bahasa": {
                            "nama": "C++",
                            "ekstensi": ".cpp"
                        },
                        "testCaseResults": []
                    },
                    {
                        "id": "01K7PTFX1KDYM213RA4BT7WWVX",
                        "score": 67,
                        "submittedAt": "2025-10-16T15:33:53.830Z",
                        "bahasa": {
                            "nama": "C++",
                            "ekstensi": ".cpp"
                        },
                        "testCaseResults": []
                    }
                ],
                "bestScore": 100,
                "submissionCount": 4,
                "canSubmit": false
            },
            {
                "id": "01K7PRKDQPQPGM934RXN9FKBCT",
                "judul": "Insertion Sort",
                "deskripsi": "Implementasikan algoritma insertion sort untuk mengurutkan array.",
                "batasan": "Jumlah elemen <= 100, nilai elemen <= 1000",
                "formatInput": "Baris pertama berisi jumlah elemen N. Baris kedua berisi N elemen dipisahkan spasi.",
                "formatOutput": "Array setelah diurutkan, dipisahkan spasi",
                "batasanMemoriKb": 65536,
                "batasanWaktuEksekusiMs": 3000,
                "templateKode": "def insertion_sort(arr):\n    for i in range(1, len(arr)):\n        key = arr[i]\n        j = i - 1\n        while j >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            j -= 1\n        arr[j + 1] = key\n    return arr\n\nn = int(input())\narr = list(map(int, input().split()))\nsorted_arr = insertion_sort(arr)\nprint(\" \".join(map(str, sorted_arr)))",
                "bobotNilai": 100,
                "contohTestCase": [],
                "totalTestCase": 3,
                "userSubmissions": [],
                "bestScore": 0,
                "submissionCount": 0,
                "canSubmit": false
            }
        ],
        "nilaiTugas": null,
        "totalBobot": 300
    }
}