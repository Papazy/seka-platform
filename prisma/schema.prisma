// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  // output   = "../node_modules/@prisma/client"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Enums
enum SubmissionStatus {
  ACCEPTED
  WRONG_ANSWER
  TIME_LIMIT_EXCEEDED
  RUNTIME_ERROR
  COMPILATION_ERROR
  PENDING
}

enum StatusCode {
  AC
  WA
  TLE
  MLE
  RTE
  CE
  PENDING
}

enum TugasStatus {
  DISERAHKAN
  TERLAMBAT
  DITOLAK
  DITERIMA
  DIHAPUS
}

enum SubmissionTugasStatus {
  DISERAHKAN
  TERLAMBAT
  DITOLAK
  DITERIMA
  DIHAPUS
  SUCCESS
  ERROR
  PENDING // untuk tracking status penilaian tugas
}
enum Semester {
  GANJIL
  GENAP
}

// 0. User
model User {
  id    String @id @default(ulid())
  email String @unique
  name  String
  password String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

// 1. Admin
model Admin {
  id  String @id @default(ulid())
  nama     String
  email    String @unique
  password String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  laboran Laboran[]

  @@map("admin")
}

// 2. Laboran
model Laboran {
  id  String @id @default(ulid())
  idAdmin  String @map("id_admin")
  nama     String
  email    String @unique
  password String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  admin     Admin       @relation(fields: [idAdmin], references: [id], onDelete: Cascade)
  praktikum Praktikum[]
  @@index([idAdmin])
  @@map("laboran")
}

// 3. Dosen
model Dosen {
  id  String @id @default(ulid())
  nip      String @unique
  nama     String
  email    String @unique
  password String
  jabatan  String // Jabatan Dosen, misal: "Lektor", "Asisten Ahli", dll.
  programStudiId String @map("program_studi_id")
  programStudi ProgramStudi @relation(fields: [programStudiId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  dosenPraktikum DosenPraktikum[]

  @@index([programStudiId])
  @@map("dosen")
}

// 4. Mahasiswa
model Mahasiswa {
  id  String @id @default(ulid())
  npm          String @unique
  nama         String
  email        String @unique
  password     String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  asistenPraktikum AsistenPraktikum[]
  pesertaPraktikum PesertaPraktikum[]
  programStudiId String @map("program_studi_id")
  programStudi ProgramStudi @relation(fields: [programStudiId], references: [id], onDelete: Cascade)

  @@index([programStudiId])
  @@map("mahasiswa")
}

// 5. Praktikum
model Praktikum {
  id  String @id @default(ulid())
  idLaboran           String @map("id_laboran")
  nama                String
  kodePraktikum       String    @unique @map("kode_praktikum")
  kodeMk              String    @map("kode_mk")
  kelas               String
  semester            Semester
  tahun               Int
  jadwalHari          String    @map("jadwal_hari")
  jadwalJamMasuk      DateTime  @map("jadwal_jam_masuk")
  jadwalJamSelesai    DateTime  @map("jadwal_jam_selesai")
  ruang               String

  // Archive status berdasarkan semester dan tahun
  isActive            Boolean   @default(true) @map("is_active")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  laboran          Laboran            @relation(fields: [idLaboran], references: [id], onDelete: Cascade)
  dosenPraktikum   DosenPraktikum[]
  asistenPraktikum AsistenPraktikum[]
  pesertaPraktikum PesertaPraktikum[]
  tugas            Tugas[]

  @@index([idLaboran])

  @@map("praktikum")
}

// 6. DosenPraktikum 
model DosenPraktikum {
  id  String @id @default(ulid())
  idDosen     String @map("id_dosen")
  idPraktikum String @map("id_praktikum")

  createdAt DateTime @default(now())

  // Relations
  dosen     Dosen     @relation(fields: [idDosen], references: [id], onDelete: Cascade)
  praktikum Praktikum @relation(fields: [idPraktikum], references: [id], onDelete: Cascade)

  @@index([idDosen, idPraktikum])
  @@unique([idDosen, idPraktikum])
  @@map("dosen_praktikum")
}

// 7. AsistenPraktikum
model AsistenPraktikum {
  id  String @id @default(ulid())
  idMahasiswa String @map("id_mahasiswa")
  idPraktikum String @map("id_praktikum")

  createdAt DateTime @default(now())

  // Relations
  mahasiswa Mahasiswa @relation(fields: [idMahasiswa], references: [id], onDelete: Cascade)
  praktikum Praktikum @relation(fields: [idPraktikum], references: [id], onDelete: Cascade)
  tugas     Tugas[]

  @@index([idMahasiswa, idPraktikum])
  @@unique([idMahasiswa, idPraktikum])
  @@map("asisten_praktikum")
}

// 8. PesertaPraktikum
model PesertaPraktikum {
  id  String @id @default(ulid())
  idMahasiswa String @map("id_mahasiswa")
  idPraktikum String @map("id_praktikum")

  createdAt DateTime @default(now())

  // Relations
  mahasiswa  Mahasiswa    @relation(fields: [idMahasiswa], references: [id], onDelete: Cascade)
  praktikum  Praktikum    @relation(fields: [idPraktikum], references: [id], onDelete: Cascade)
  submission Submission[]
  nilaiTugas NilaiTugas[]

  @@index([idMahasiswa, idPraktikum])
  @@unique([idMahasiswa, idPraktikum])
  @@map("peserta_praktikum")
}

// 9. Tugas
model Tugas {
  id  String @id @default(ulid())
  idPraktikum     String @map("id_praktikum")
  idAsisten       String @map("id_asisten")
  judul           String
  deskripsi       String   @db.LongText
  deadline        DateTime
  maksimalSubmit  Int      @default(3) @map("maksimal_submit") // Default 3, bisa diubah asisten

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  praktikum Praktikum        @relation(fields: [idPraktikum], references: [id], onDelete: Cascade)
  asisten   AsistenPraktikum @relation(fields: [idAsisten], references: [id], onDelete: Cascade)
  soal      Soal[]
  nilaiTugas NilaiTugas[]
  tugasBahasa TugasBahasa[]


  @@index([idPraktikum, idAsisten])
  @@map("tugas")
}

// 10. Soal
model Soal {
  id  String @id @default(ulid())
  idTugas                   String @map("id_tugas")
  judul                     String
  deskripsi                 String @db.LongText
  batasan                   String @db.LongText
  formatInput               String @map("format_input") @db.LongText
  formatOutput              String @map("format_output") @db.LongText
  batasanMemoriKb           Int    @map("batasan_memori_kb")
  batasanWaktuEksekusiMs    Int    @map("batasan_waktu_eksekusi_ms")
  templateKode              String @map("template_kode") @db.Text
  bobotNilai                Int    @map("bobot_nilai") // Bobot untuk perhitungan score 100

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  tugas           Tugas             @relation(fields: [idTugas], references: [id], onDelete: Cascade)
  contohTestCase  ContohTestCase[]
  testCase        TestCase[]
  submission      Submission[]

  @@index([idTugas])
  @@map("soal")
}

// 11. ContohTestCase
model ContohTestCase {
  id  String @id @default(ulid())
  idSoal            String @map("id_soal")
  contohInput       String @map("contoh_input") @db.Text
  contohOutput      String @map("contoh_output") @db.Text
  penjelasanInput   String @map("penjelasan_input") @db.Text
  penjelasanOutput  String @map("penjelasan_output") @db.Text

  createdAt DateTime @default(now())

  // Relations
  soal Soal @relation(fields: [idSoal], references: [id], onDelete: Cascade)

  @@index([idSoal])
  @@map("contoh_test_case")
}

// 12. TestCase
model TestCase {
  id  String @id @default(ulid())
  idSoal           String @map("id_soal")
  input            String @db.Text
  outputDiharapkan String @map("output_diharapkan") @db.Text

  createdAt DateTime @default(now())

  // Relations
  soal           Soal             @relation(fields: [idSoal], references: [id], onDelete: Cascade)
  testCaseResult TestCaseResult[]

  @@index([idSoal])
  @@map("test_case")
}

// 13. BahasaPemrograman
model BahasaPemrograman {
  id  String @id @default(ulid())
  nama      String @unique
  ekstensi  String
  compiler  String
  versi     String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  submission Submission[]
  tugasBahasa TugasBahasa[]

  @@map("bahasa_pemrograman")
}

model TugasBahasa {
  idTugas String @map("id_tugas")
  idBahasa String @map("id_bahasa")

  tugas Tugas @relation(fields: [idTugas], references: [id], onDelete: Cascade)
  bahasa BahasaPemrograman @relation(fields: [idBahasa], references: [id], onDelete: Cascade)

  @@id([idTugas, idBahasa])
  @@map("tugas_bahasa")
}

// 14. Submission
model Submission {
  id  String @id @default(ulid())
  idSoal     String @map("id_soal")
  idPeserta  String @map("id_peserta")
  idBahasa   String @map("id_bahasa")
  sourceCode String @map("source_code") @db.Text
  score      Int    @default(0)
  statusJawaban SubmissionTugasStatus @map("status_jawaban")// terlambat atau diserahkan
  status   SubmissionStatus @default(PENDING)
  statusCode StatusCode @map("status_code") @default(PENDING) // untuk menyimpan kode status dari judger

  submittedAt   DateTime @default(now()) @map("submitted_at")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  soal           Soal                @relation(fields: [idSoal], references: [id], onDelete: Cascade)
  peserta        PesertaPraktikum    @relation(fields: [idPeserta], references: [id], onDelete: Cascade)
  bahasa         BahasaPemrograman   @relation(fields: [idBahasa], references: [id])
  testCaseResult TestCaseResult[]

  @@index([idSoal, idPeserta, idBahasa])
  @@map("submission")
}

// 15. TestCaseResult
model TestCaseResult {
  id  String @id @default(ulid())
  idSubmission      String @map("id_submission")
  idTestCase        String @map("id_test_case")
  status            SubmissionStatus
  outputDihasilkan  String?          @map("output_dihasilkan") @db.Text
  waktuEksekusiMs   Int?             @map("waktu_eksekusi_ms")
  memoriKb          Int?             @map("memori_kb")

  createdAt DateTime @default(now())

  // Relations
  submission Submission @relation(fields: [idSubmission], references: [id], onDelete: Cascade)
  testCase   TestCase   @relation(fields: [idTestCase], references: [id], onDelete: Cascade)

  @@index([idSubmission, idTestCase])
  @@unique([idSubmission, idTestCase])
  @@map("test_case_result")
}

// 16. NilaiTugas
model NilaiTugas {
  id  String @id @default(ulid())
  idPeserta  String @map("id_peserta")
  idTugas    String @map("id_tugas")
  totalNilai Int @map("total_nilai") // Total nilai dari semua soal dalam tugas
  status    SubmissionTugasStatus @default(DISERAHKAN) // Status penilaian tugas
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  peserta PesertaPraktikum @relation(fields: [idPeserta], references: [id], onDelete: Cascade)
  tugas   Tugas            @relation(fields: [idTugas], references: [id], onDelete: Cascade)

  @@index([idPeserta, idTugas])
  @@unique([idPeserta, idTugas])
  @@map("nilai_tugas")
}

// 17. untuk tracking tahun sekarang
model PengaturanSistem {
  id  String @id @default(ulid())
  currentSemester  Semester  @map("current_semester")
  currentYear      Int       @map("current_year")
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("pengaturan_sistem")
}

// 18. Fakultas
model Fakultas {
  id  String @id @default(ulid())
  nama      String @unique
  kodeFakultas String @unique @map("kode_fakultas")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // Relations
  programStudi ProgramStudi[]
  @@map("fakultas")
}

// 19. ProgramStudi
model ProgramStudi {
  id  String @id @default(ulid())
  nama      String 
  kodeProdi String @unique @map("kode_prodi")
  idFakultas String @map("id_fakultas")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // Relations
  fakultas Fakultas @relation(fields: [idFakultas], references: [id], onDelete: Cascade)

  mahasiswa Mahasiswa[]
  dosen Dosen[]

  @@index([idFakultas])
  @@map("program_studi")
}

